{"version":3,"sources":["component/Card/card.jsx","component/CradList/cardList.jsx","component/SearchBox/searchBox.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","name","email","className","alt","src","CardList","monsters","map","monster","key","id","SearchBox","placeholder","handleChange","type","onChange","App","useState","setMonsters","searchFieldInput","setSearchFieldInput","useEffect","fetch","then","response","json","users","modifiedMonsters","filter","toLowerCase","includes","event","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oTAgBeA,G,kBAbF,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACpB,OACE,yBAAKC,UAAU,QACb,yBACEC,IAAG,UAAKH,EAAL,cACHI,IAAG,+BAA0BJ,EAA1B,gCAEL,4BAAKA,GACL,2BAAIC,MCGKI,EAVE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClB,OACE,yBAAKJ,UAAU,aACZI,EAASC,KAAI,SAACC,GAAD,OACZ,kBAAC,EAAD,CAAMC,IAAKD,EAAQE,GAAIV,KAAMQ,EAAQR,KAAMC,MAAOO,EAAQP,aCOnDU,G,MAbG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAChC,OACE,6BACE,2BACEX,UAAU,SACVY,KAAK,SACLF,YAAaA,EACbG,SAAUF,OCuBHG,MA3Bf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNX,EADM,KACIY,EADJ,OAEmCD,mBAAS,IAF5C,mBAENE,EAFM,KAEYC,EAFZ,KAIbC,qBAAU,WACRC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAWR,EAAYQ,QAC9B,IAEH,IAAMC,EAAmBrB,EAASsB,QAAO,SAACpB,GAAD,OACvCA,EAAQR,KAAK6B,cAAcC,SAASX,EAAiBU,kBAGvD,OACE,yBAAK3B,UAAU,OACb,oCACA,kBAAC,EAAD,CAAWU,YAAY,kBAAkBC,aAMpC,SAACkB,GAAD,OAAWX,EAAoBW,EAAMC,OAAOC,UALjD,kBAAC,EAAD,CAAU3B,SAAUqB,MCXNO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2929e2c8.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.style.css\";\n\nconst Card = ({ name, email }) => {\n  return (\n    <div className=\"card\">\n      <img\n        alt={`${name}'s monster`}\n        src={`https://robohash.org/${name}.png?set=set4&size=120x120`}\n      ></img>\n      <h1>{name}</h1>\n      <p>{email}</p>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport \"./cardList.style.css\";\nimport Card from \"../Card/card\";\n\nconst CardList = ({ monsters }) => {\n  return (\n    <div className=\"card-list\">\n      {monsters.map((monster) => (\n        <Card key={monster.id} name={monster.name} email={monster.email} />\n      ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\nimport \"./searchbox.style.css\";\nconst SearchBox = ({ placeholder, handleChange }) => {\n  return (\n    <div>\n      <input\n        className=\"search\"\n        type=\"search\"\n        placeholder={placeholder}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport CardList from \"./component/CradList/cardList\";\nimport SearchBox from \"./component/SearchBox/searchBox\";\n\nfunction App() {\n  const [monsters, setMonsters] = useState([]);\n  const [searchFieldInput, setSearchFieldInput] = useState(\"\");\n\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => setMonsters(users));\n  }, []);\n\n  const modifiedMonsters = monsters.filter((monster) =>\n    monster.name.toLowerCase().includes(searchFieldInput.toLowerCase())\n  );\n\n  return (\n    <div className=\"App\">\n      <h1>Cats</h1>\n      <SearchBox placeholder=\"Search Monsters\" handleChange={handleChange()} />\n      <CardList monsters={modifiedMonsters} />\n    </div>\n  );\n\n  function handleChange() {\n    return (event) => setSearchFieldInput(event.target.value);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}